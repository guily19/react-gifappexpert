{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","props","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","prev","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"sLAoCeA,EAjCK,SAACC,GAAW,IAEtBC,EAAkBD,EAAlBC,cAFqB,EAGOC,mBAAS,IAHhB,mBAGtBC,EAHsB,KAGVC,EAHU,KAkB7B,OACE,sBAAMC,SAdkB,SAACC,GACzBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAACS,GACb,MAAM,CAAEP,GAAR,mBAAuBO,OAEzBN,EAAc,MAQhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SARqB,SAACP,GAC1BF,EAAcE,EAAEQ,OAAOF,a,8BCnBdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,gDACgCC,UAAUH,GAD1C,8DAEFI,MAAOF,GAFL,cAEfG,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATjB,kBAYdM,GAZc,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAClC,OACE,sBAAKc,UAAU,OAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAKA,QCFEO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAChBd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH+B,mBACnCC,EADmC,KAC5BC,EAD4B,KAe1C,OATAC,qBAAU,WACRxB,EAASC,GAAWwB,MAAM,SAAAC,GACxBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IAEGqB,EDZ2BK,CAAc1B,GAAnCa,EAF0B,EAE/BN,KAAca,EAFiB,EAEjBA,QACtB,OACE,qCACE,mCAAOpB,EAAP,OACCoB,GAAW,4CACZ,qBAAKJ,UAAU,iDAAf,SACMH,EAAOJ,KAAK,SAAAC,GACZ,OACI,wBAAC,EAAD,2BAAiBA,GAAjB,IAAsBiB,IAAKjB,EAAIC,eEVlCiB,EAAe,WAAO,IAAD,EAEI1C,mBAAS,IAFb,mBAEzB2C,EAFyB,KAEb5C,EAFa,KAIhC,OACE,qCACE,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACI4C,EAAWpB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCV1B8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.384227c3.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategory = (props) => {\n\n  const { setCategories } = props;\n  const [inputValue, setInputValue] = useState('');\n\n  const handlOnSubmitForm = (e) => {\n    e.preventDefault();\n    if ( inputValue.trim().length > 2 ){\n      setCategories((prev) => {\n        return [inputValue, ...prev]\n      });\n      setInputValue('');\n    }\n  }\n\n  const handlOnChangeInput = (e) => {\n    setInputValue(e.target.value);\n  }\n  return (\n    <form onSubmit={handlOnSubmitForm}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handlOnChangeInput}\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;","export const getGifs = async (category) => {\n  const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=1&api_key=fA6Xxh8xUIy3LlEh9UuUWSM4faMxEEuv`;\n  const resp = await fetch( url );\n  const { data } = await resp.json();\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n  return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({title, url}) => {\n  return (\n    <div className=\"card\">\n      <img src={url} alt={title} />\n      <p>{ title }</p>\n    </div>\n  )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n  const { data:images , loading } = useFetchGifs( category );\n  return (\n    <>\n      <h3> { category} </h3>\n     { loading && <p> Loading.. </p> } \n      <div className=\"card-grid animate__animated animate__heartBeat\">\n          { images.map( img => {\n            return (\n                <GifGridItem {...img} key={img.id}/>\n            );\n          })}\n      </div>\n    </>\n  )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n    getGifs( category ).then( imgs => {\n      setState({\n        data: imgs,\n        loading: false\n      });\n    })\n  }, [category])\n\n  return state;\n\n}\n","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n  const [categories, setCategories] = useState([]);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <hr/>\n      <AddCategory setCategories={setCategories}/>\n      <ol>\n        { categories.map( category => \n            <GifGrid key={category} category={category}/>\n        ) }\n      </ol>\n    </>\n  )\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}